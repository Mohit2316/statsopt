<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
<head>
  <!-- Page Rendered At: 2015-06-29 16:29:24 -0700
   /\\\\\
  /\\\///\\\          /\\\\\\\\\\\\\      /\\\\\\\\\     /\\\             /\\\\\\\\\     /\\\\\     /\\\  /\\\\\\\\\\\\\\\  /\\\\\\\\\\\    /\\\\\\\\\
 /\\\/  \///\\\       \/\\\/////////\\\  /\\\\\\\\\\\\\  \/\\\           /\\\\\\\\\\\\\  \/\\\\\\   \/\\\ \///////\\\/////  \/////\\\///   /\\\///////\\\
 /\\\      \//\\\      \/\\\       \/\\\ /\\\/////////\\\ \/\\\          /\\\/////////\\\ \/\\\/\\\  \/\\\       \/\\\           \/\\\     \/\\\     \/\\\
 \/\\\       \/\\\      \/\\\\\\\\\\\\\/ \/\\\       \/\\\ \/\\\         \/\\\       \/\\\ \/\\\//\\\ \/\\\       \/\\\           \/\\\     \/\\\\\\\\\\\/
  \//\\\      /\\\       \/\\\/////////   \/\\\\\\\\\\\\\\\ \/\\\         \/\\\\\\\\\\\\\\\ \/\\\\//\\\\/\\\       \/\\\           \/\\\     \/\\\//////\\\
    \///\\\  /\\\         \/\\\            \/\\\/////////\\\ \/\\\         \/\\\/////////\\\ \/\\\ \//\\\/\\\       \/\\\           \/\\\     \/\\\    \//\\\
       \///\\\\\/          \/\\\            \/\\\       \/\\\ \/\\\         \/\\\       \/\\\ \/\\\  \//\\\\\\       \/\\\           \/\\\     \/\\\     \//\\\
  /\\\   \/////   /\\\      \/\\\            \/\\\       \/\\\ \/\\\\\\\\\\\ \/\\\       \/\\\ \/\\\   \//\\\\\       \/\\\        /\\\\\\\\\\\ \/\\\      \//\\\
    \//\\\       /\\\        \///             \///        \///  \///////////  \///        \///  \///     \/////        \///        \///////////  \///        \///
      \//\\\    /\\\
          \//\\\\\
-->
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link rel="shortcut icon" href="/favicon.ico" sizes="16x16 32x32" type="image/x-icon">
<title>The Pokémon Problem: a new anti-pattern | Palantir</title>
<meta name="viewport" content="width=device-width,user-scalable=no,initial-scale=1.0">
<meta name="apple-mobile-web-app-capable" content="yes">

<meta name="description" content="Palantir builds software that connects data, technologies, humans and environments.">

<meta name="keywords" content="Palantir, home, data, technology, software, solutions, environments, analysis">
<link rel="stylesheet" href="/build/css/style.css?v=20150629162924" media="screen">
<link rel="alternate" type="application/rss+xml"  href="https://palantir.com/feed/index.xml" title="Palantir RSS">
<!-- Modernizr -->
<script src="/build/js/modernizr-custom-2.8.2.min.js"></script>

<!--[if lt IE 9]>
<script src="/build/js/respond-1.4.2.min.js"></script>
<link rel="stylesheet" href="/build/css/ie.css?v=20150629162924" media="screen, projection" type="text/css">
<![endif]-->

  <!-- OpenGraph -->
  <meta property="og:title" content="The Pokémon Problem: a new anti-pattern">
<meta property="og:type" content="website">
<meta property="og:url" content="https://palantir.com/2009/03/the-pokemon-problem">

<meta property="og:image" content="">

<meta property="og:site_name" content="Palantir">
<meta property="og:description" content="">


</head>
<body id="blog" class="blog-post">
  <div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&appId=448433878601301&version=v2.0";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

  <div id="site-wrapper">
    <!-- Header -->
    
<header id="site-header">
  <!-- Nav: Main -->
  <nav class="navbar" role="navigation">
    <div class="container-fluid">

      <div class="navbar-header">
        <!-- Logo -->
        <h1 id="site-name" class="logo">
          <a href="/">
            <div id="logo-svg">
              <!--[if gte IE 9]><!-->
                <svg width="100" height="25" viewBox="0 0 100 25" xmlns="http://www.w3.org/2000/svg">
                  <path d="M24.076 2.98h6.237c2.27 0 3.814.139 5.092 1.548.935.992 1.373 2.302 1.373 3.75 0 1.468-.458 2.738-1.469 3.79-.992 1.012-2.27 1.667-5.626 1.667h-3.013v8.611h-2.575v-19.365h-.019zm2.575 8.492h3.071c1.717 0 4.31-.139 4.31-3.294 0-3.036-2.422-3.036-3.776-3.036h-3.605v6.329z"/><path d="M45.132 22.365c-.191-.675-.229-1.31-.229-2.024-1.163 2.222-2.918 2.44-4.005 2.44-2.975 0-4.558-1.746-4.558-3.968 0-1.071.362-2.798 2.27-3.948 1.392-.813 3.452-.893 4.482-.893.61 0 1.011.02 1.755.079 0-1.667 0-2.401-.458-2.976-.496-.675-1.545-.893-2.251-.893-2.441 0-2.575 1.746-2.613 2.282h-2.422c.076-.694.153-1.647.896-2.56.992-1.131 2.823-1.448 4.177-1.448 1.888 0 3.891.615 4.596 1.984.42.813.439 1.448.439 2.063l-.095 6.448c0 .218.019 2.024.21 3.373h-2.193v.04zm-1.678-6.647c-.973 0-4.673 0-4.673 2.738 0 .853.515 2.341 2.689 2.341 1.24 0 2.174-.516 2.765-1.448.534-.913.572-1.667.61-3.552-.439-.04-.801-.079-1.392-.079z" id="a"/><path d="M49.366 2.98h2.422v19.385h-2.422v-19.385z"/><path d="M62.24 22.365c-.172-.675-.229-1.31-.229-2.024-1.163 2.222-2.918 2.44-4.005 2.44-2.975 0-4.577-1.746-4.577-3.968 0-1.071.362-2.798 2.27-3.948 1.392-.813 3.452-.893 4.482-.893.61 0 1.011.02 1.755.079 0-1.667 0-2.401-.458-2.976-.496-.675-1.545-.893-2.251-.893-2.46 0-2.575 1.746-2.613 2.282h-2.422c.076-.694.153-1.647.896-2.56.973-1.131 2.823-1.448 4.177-1.448 1.888 0 3.891.615 4.596 1.984.42.813.439 1.448.439 2.063l-.095 6.448c0 .218.019 2.024.21 3.373h-2.174v.04zm-1.697-6.647c-.973 0-4.673 0-4.673 2.738 0 .853.515 2.341 2.689 2.341 1.24 0 2.174-.516 2.765-1.448.534-.913.572-1.667.61-3.552-.42-.04-.782-.079-1.392-.079z"/><path d="M66.493 10.44l-.019-1.567h2.422l.019 2.183c.286-.556 1.202-2.44 4.158-2.44 1.163 0 4.692.456 4.692 4.583v9.147h-2.479v-8.571c0-.893-.095-1.687-.706-2.302-.629-.615-1.469-.913-2.289-.913-1.755 0-3.376 1.31-3.376 4.028v7.758h-2.422v-11.905z"/><path d="M78.528 8.873h2.289v-2.877l2.403-.813v3.671h2.899v1.845h-2.899v8.036c0 .675 0 1.806 1.736 1.806.496 0 .954-.079 1.163-.139v1.964c-.439.079-1.144.159-2.022.159-2.212 0-3.28-.675-3.28-2.877v-8.909h-2.289v-1.865z"/><path d="M87.816 2.98h2.918v2.817h-2.918v-2.817zm.267 5.893h2.422v13.472h-2.422v-13.472z"/><path d="M92.755 11.611c0-.913-.057-1.845-.134-2.738h2.46l.057 2.599c.458-1.885 2.022-2.5 3.09-2.659.725-.099 1.259-.079 1.678-.06v2.46c-.134-.06-.286-.079-.458-.099-.172-.02-.42-.02-.706-.02-2.861 0-3.547 1.766-3.547 4.087v7.163h-2.441v-10.734z"/><path d="M9.866-.04c-5.211 0-9.45 4.226-9.45 9.464s4.22 9.464 9.45 9.464c5.211 0 9.45-4.226 9.45-9.464s-4.24-9.464-9.45-9.464zm0 16.012c-3.606 0-6.538-2.937-6.538-6.548s2.932-6.548 6.538-6.548c3.606 0 6.538 2.937 6.538 6.548-.02 3.631-2.932 6.548-6.538 6.548zM18.306 18.056l-8.44 3.651-8.46-3.651-1.387 2.698 9.847 4.206 9.847-4.206-1.407-2.698z"/>
              <!--<![endif]-->
              </svg>
            </div>
          </a>
        </h1>
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#main-navbar">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
      </div>

      <div class="collapse navbar-collapse" id="main-navbar">
        <ul class="nav navbar-nav">
          <li>
            <a href="/products/">Products</a>
            <ul class="dropdown-menu">
              <li><a href="/palantir-gotham/">Palantir Gotham</a></li>
              <li><a href="/palantir-metropolis/">Palantir Metropolis</a></li>
            </ul>
          </li>
          <li>
            <a href="/solutions/">Solutions</a>
            <ul class="dropdown-menu split-menu">
              
              <li><a href="/solutions/anti-fraud/" title="Anti Fraud">Anti Fraud</a></li>
              
              <li><a href="/solutions/capital-markets/" title="Capital Markets">Capital Markets</a></li>
              
              <li><a href="/solutions/case-management/" title="Case Management">Case Management</a></li>
              
              <li><a href="/disaster-preparedness/" title="Crisis Response">Crisis Response</a></li>
              
              <li><a href="/solutions/cyber/" title="Cyber Security">Cyber Security</a></li>
              
              <li><a href="/solutions/defense/" title="Defense">Defense</a></li>
              
              <li><a href="/disaster-preparedness/" title="Disaster Preparedness">Disaster Preparedness</a></li>
              
              <li><a href="/solutions/disease-response/" title="Disease Response">Disease Response</a></li>
              
              <li><a href="/solutions/healthcare-delivery/" title="Healthcare Delivery">Healthcare Delivery</a></li>
              
              <li><a href="/solutions/insider-threat/" title="Insider Threat">Insider Threat</a></li>
              
              <li><a href="/solutions/insurance-analytics" title="Insurance Analytics">Insurance Analytics</a></li>
              
              <li><a href="/solutions/intelligence/" title="Intelligence">Intelligence</a></li>
              
              <li><a href="/solutions/law-enforcement/" title="Law Enforcement">Law Enforcement</a></li>
              
              <li><a href="/solutions/legal-intelligence/" title="Legal Intelligence">Legal Intelligence</a></li>
              
              <li><a href="/solutions/palantir-verus/" title="Palantir Verus">Palantir Verus</a></li>
              
              <li><a href="/solutions/pharma/" title="Pharma R&amp;D">Pharma R&amp;D</a></li>
              
              <li><a href="/solutions/trader-oversight/" title="Trader Oversight">Trader Oversight</a></li>
              
              <li><a href="/solutions/custom-solutions/" title="Custom Solutions">Custom Solutions</a></li>
              
            </ul>
          </li>
          <li>
            <a href="/careers/">Careers</a>
            <ul class="dropdown-menu">
              
              <li><a href="/engineering-culture/" title="Engineering Culture">Engineering Culture</a></li>
              
              <li><a href="/life-at-palantir/" title="Life at Palantir">Life at Palantir</a></li>
              
              <li><a href="/getting-hired/" title="Getting Hired">Getting Hired</a></li>
              
              <li><a href="/college/" title="Students">Students</a></li>
              
              <li><a href="/careers/" title="Explore Careers">Explore Careers</a></li>
              
            </ul>
          </li>
          <li>
            <a href="/about/">About</a>
            <ul class="dropdown-menu">
              <li><a href="/what-we-believe/">What We Believe</a></li>
              <li><a href="/philanthropy-engineering/">Philanthropy Engineering</a></li>
              <li><a href="/library/">Library</a></li>
              <li><a href="/media/">Media</a></li>
            </ul>
          </li>
        </ul>
        <ul class="nav navbar-nav secondary">
          <li><a href="/contact/">Contact</a></li>
          <li><a href="/category/blogs/">Blog</a></li>
          <li class="search-form">
            <form role="search" method="get" class="search" action="/search/">
              <input id="main-search-query" type="text" name="q" value="" class="search-input search_field_main" maxlength="50" placeholder="Search Palantir">
              <input type="submit" class="search-trigger search_submit_main">
            </form>
          </li>
        </ul>
      </div><!-- /.navbar-collapse -->

    </div><!-- /.container-fluid -->
  </nav>


</header><!-- /header -->


    <div id="hero-wrapper-auto" data-image-bg='["/build/images/blog/blog-hero.jpg", "/build/images/blog/blog-hero@2x.jpg"]'>
      <div class="container">
        <div class="row block block-hero block-centered">
          <article class="col-xs-12">
            <h1 class="main"><a href="/category/blogs">The Palantir Blog</a></h1>
          </article>
        </div><!-- /.row -->
      </div><!-- /.container -->
      <div id="hero-subnav">
        <div class="container">
          <div class="row">
            <div class="col-md-8 col-md-offset-2">
              <nav>
                <ul class="blog-meta transparent">
                  <li class="blog-meta-date"><span class="icon-pt-icon-time"></span> March 19, 2009</li>
                  <li class="blog-meta-author"><span class="icon-pt-icon-person"></span> <a href="/author/carrino">John Carrino</a></li>
                  
                  <li class="post_tags">
                    <span class="icon-pt-icon-tag"></span>
                    
                    <span class="tags"><a href="/tag/coding">coding</a></span>
                    
                    <span class="tags"><a href="/tag/tips and tricks">tips and tricks</a></span>
                    
                    <span class="tags"><a href="/tag/software engineering">software engineering</a></span>
                    
                  </li>
                  
                </ul>
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div><!-- /#hero-wrapper-auto -->

    <!-- Page Content -->
    <div class="container">
      <div class="row">
        <div id="post-content" class="col-md-offset-1 col-md-7">
          <h1>The Pokémon Problem: a new anti-pattern</h1>
          <p><img src="/wp-assets/wp-content/static/techblog/2009/03/pokepic1.jpg" alt="Gotta catch " /><br />
It’s always fun to release a new piece of jargon into the wild. I’ve run into a number of bugs in our codebase that caused by an <a href="http://en.wikipedia.org/wiki/Anti-pattern">anti-pattern</a> I’d like to dub <strong>The Pokémon Problem</strong>.</p>

<p>Much like the game of <a href="http://en.wikipedia.org/wiki/Whack-a-mole">Whac-a-Mole</a>, this is a class of bugs where fixing every occurrence does not prevent the bug from returning in new code: it is easy for code delta to result in an instance of the bug being re-introduced into the code base. Even if you “<a href="http://www.youtube.com/watch?v=vZ3gPXVMWRY">catch ‘em all</a>”, nothing prevents someone else from introducing new Pokémon bugs later.</p>

<p>Not only is this bug easy to re-introduce, but it sometimes can be hard to find all currently existing instances of this pattern. Although tools like Eclipse make it easier to track down all the places that code is called,  sometimes you’re looking for things that happen in a certain sequence (which tools like Eclipse don’t do a good job of searching for) and dynamic invocation mechanisms like <a href="http://www.ibm.com/developerworks/library/j-dyn0603/">Java Reflection</a> can sometimes make it impossible to be exhaustive.  This type of bug is also resistant to automated refactoring: changing the protocol of dealing with this corner of your code will require you to track down all places it was touched and manually refactor them.  It generally signals a failure to use sufficient <a href="http://en.wikipedia.org/wiki/Separation_of_concerns">separation of concerns</a>.</p>

<p>In general, this anti-pattern is a result of <a href="http://en.wikipedia.org/wiki/API">APIs</a> that require the caller to be responsible for state management of resources that the API owns.  This can include things like an object that requires the caller to have run an initialization method before calling any other method on the object.  These bugs get even more insidious when a failure to do things in the right order does not cause a hard failure (like throwing an exception) but instead creates some sort of subtle corruption that may not be noticed or cause subsequent calls to fail unexpectedly.</p>

<p>Read on for some strategies on dealing with the Pokémon problem.</p>

<h2 id="solving-the-pokmon-problem">Solving the Pokémon Problem</h2>

<p>How do we solve the Pokémon problem?  Sometimes it is as easy as writing a unit test to verify that no new Pokémon exist. More often than not, though, you’ll have to use better encapsulation to solve the problem.  If the Pokemon problem is the anti-pattern, <a href="http://en.wikipedia.org/wiki/Information_hiding">encapsulation</a> is its opposite.</p>

<p>For an example, I’ll turn to a real problem I ran into in the <a href="http://www.palantir.com/platforms/#gotham">Palantir Government</a> codebase:  Let’s say I have class <em>Parser</em> and it has a method <em>getAttribute()</em>.  I want to add the ability to have shortened (obfuscated) tag names to the <em>Parser</em> class.</p>

<h3 id="the-wrong-approach">The wrong approach</h3>

<p>One approach I can take:</p>

<ol>
  <li>
    <p>Create a class called <em>AttributeHandler</em> that wraps calls to <em>Parser.getAttribute()</em>. It handles detection of the short or full XML dialect and then returns the appropriate attribute value.</p>
  </li>
  <li>Stick an instance of this <em>AttrbributeHandler</em> class in a member variable of <em>Parser</em> and make sure to call <em>AttributeHandler.getAttribute()</em> instead of <em>Parser.getAttribute()</em> when processing attributes.</li>
  <li>Put comment on <em>Parser.getAttribute()</em> mentioning that it shouldn’t be called directly anymore.</li>
</ol>

<p>I just introduced a Pokémon problem.  The next person that edits this code may not read my comment and know that calling <em>Parser.getAttribute()</em> is a bug.  They may not test the short tag case and find the bug. How do I fix this Pokémon problem? </p>

<h3 id="the-right-approach">The right approach</h3>

<p>Approaching this encapsulation problem has a number of different approaches one could take.  Here’s what I chose:</p>

<ol>
  <li>
    <p>Create a class called <em>AttributeHandler</em> that wraps calls to <em>Parser.getAttribute()</em>. It handles detection of the short or full XML dialect and then returns the appropriate attribute value.</p>
  </li>
  <li>Stick an instance of this <em>AttrbributeHandler</em> class in a member variable of <em>Parser</em>.</li>
  <li>Create a wrapper class around <em>Parser</em> that delegates the <em>getAttribute()</em> call to the <em>AttributeHandler</em> member when processing attributes.</li>
</ol>

<p>(You might ask why I used a delegate instead of sub-classing the parser and overriding the <em>getAttribute()</em> method: it didn’t fit for architectural reasons that aren’t relevant here). Now the developer no longer has access to the <em>Parser.getAttribute()</em> method that would cause the undesired behavior.</p>

<h2 id="in-depth-example-resource-management">In-depth Example: Resource Management</h2>

<p>Another common place you might run into the Pokémon problem is code that needs to clean up resources.  Some coders are lazy and don’t want to always write their try/finally/close blocks properly.  This can lead to resource leaks; for things like file handles, this usually isn’t a large issue, but for scarce resources like database connections, it’s critical that things get cleaned and returned to the pool.  For locks, it’s absolutely essential to avoid deadlocks.</p>

<h3 id="the-wrong-way">The wrong way</h3>

<p>Here’s a simple example of bad resource management.  In this (admittedly contrived) scenario, we have class that’s managing a resource for us, in this case it’s a status file.  Different parts of the app need to read the status file where, presumably, something is storing its status.</p>

<p>Here’s the naive implementation of the status manager class:</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PokemonStatusFileManager</span> <span class="o">{</span>
  <span class="kd">final</span> <span class="n">File</span> <span class="n">statusFile</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">PokemonStatusFileManager</span><span class="o">(</span><span class="n">File</span> <span class="n">statusFilePath</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">statusFile</span> <span class="o">=</span> <span class="n">statusFilePath</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="n">InputStream</span> <span class="nf">getStatusFileInputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">FileNotFoundException</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">statusFile</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<p>Based on this implementation, here’s some code that would use it.  Note that first method, <em>parseStatusFileIncorrectly()</em> does no error checking and may not close the <em>InputStream</em> properly if an exception is thrown.  The second method does proper resource handling, but it’s kind of ugly to read.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PokemonParseStatusFile</span> <span class="o">{</span>
  <span class="cm">/**</span>
<span class="cm">   * This is not proper resource management.</span>
<span class="cm">   * @param manager</span>
<span class="cm">   * @throws IOException</span>
<span class="cm">   */</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">parseStatusFileIncorrectly</span><span class="o">(</span><span class="n">PokemonStatusFileManager</span> <span class="n">manager</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">InputStream</span> <span class="n">statusFile</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="na">getStatusFileInputStream</span><span class="o">();</span>
    <span class="n">readFrom</span><span class="o">(</span><span class="n">statusFile</span><span class="o">);</span>
    <span class="n">statusFile</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="cm">/**</span>
<span class="cm">   * This is proper resource management, but it&#39;s tedious to have to write.</span>
<span class="cm">   * Some coders are too lazy to always do this the right way.</span>
<span class="cm">   * @param manager</span>
<span class="cm">   * @throws IOException</span>
<span class="cm">   */</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">parseStatusFileCorrectly</span><span class="o">(</span><span class="n">PokemonStatusFileManager</span> <span class="n">manager</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">InputStream</span> <span class="n">statusFile</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="n">statusFile</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="na">getStatusFileInputStream</span><span class="o">();</span>
      <span class="n">readFrom</span><span class="o">(</span><span class="n">statusFile</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
      <span class="c1">// carefully close the resource</span>
      <span class="k">if</span><span class="o">(</span><span class="n">statusFile</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
          <span class="n">statusFile</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
          <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Error closing statusFile!&quot;</span><span class="o">);</span>
          <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">);</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readFrom</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">statusFile</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="c1">// do the reading here...</span>
  <span class="o">}</span>

<span class="o">}</span></code></pre></div>

<p>So this produces a classic Pokémon problem: everyone who interacts with the StatusFileManager has to do proper resource handling.  Now imagine that this is an important lock instead of just a file handle: this Pokémon problem could cause deadlock (which would be bad).</p>

<p>So how do we fix this? <a href="http://en.wikipedia.org/wiki/Visitor_pattern">The Visitor Pattern</a>.</p>

<h3 id="solving-the-pokmon-problem-with-the-visitor-patternhttpenwikipediaorgwikivisitorpattern">Solving the Pokémon problem with the <a href="http://en.wikipedia.org/wiki/Visitor_pattern">visitor pattern</a></h3>

<p>The Visitor Pattern is a potent weapon in fighting the Pokémon problem: it allows you to fully encapsulate access to a resource by injecting into the places it’s needed but preserving overall control of the resource in the code that “owns” the resource.  Classically used for controlling things like iteration order, here the visitor pattern is applied as a form of <a href="http://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a> to enable lifecycle management.</p>

<p>The visitor pattern as applied to resource management is fairly straightforward:</p>

<ol>
  <li>Define an interface, <em>ResourceVisitor</em> with one method, <em>visit(Resource r)</em> (where <em>Resource</em> is the type of resource we’re managing.</li>
  <li>Define the resource manager with a method that takes a <em>ResourceVisitor</em> as a parameter.  Manage the lifecycle of the resource and call <em>ResourceVisitor.visit(r)</em> when appropriate, handling all initialization, error-handling and cleanup.</li>
</ol>

<p>Here’s our re-spin of the status file manager class.  You’ll notice that we’ve moved the resource handling code from the correct example above and encapsulated it in the visitor pattern:</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UnPokemonStatusFileManager</span> <span class="o">{</span>

  <span class="cm">/**</span>
<span class="cm">   * Visitor interface implemented by callers wishing to</span>
<span class="cm">   * interact with the status file.</span>
<span class="cm">   */</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">interface</span> <span class="nc">StatusFileVisitor</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitStatusFile</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">statusFile</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">final</span> <span class="n">File</span> <span class="n">statusFile</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">UnPokemonStatusFileManager</span><span class="o">(</span><span class="n">File</span> <span class="n">statusFilePath</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">statusFile</span> <span class="o">=</span> <span class="n">statusFilePath</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="cm">/**</span>

<span class="cm">   * Note that this method is now private.</span>

<span class="cm">   */</span>
  <span class="kd">private</span> <span class="n">InputStream</span> <span class="nf">getStatusFileInputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">FileNotFoundException</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">FileInputStream</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">statusFile</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="cm">/**</span>
<span class="cm">   * Here&#39;s the method that takes the visitor and</span>
<span class="cm">   * fully encapsulates the lifecycle of the status file.</span>
<span class="cm">   */</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">parseStatusFile</span><span class="o">(</span><span class="n">StatusFileVisitor</span> <span class="n">parser</span><span class="o">)</span>
  <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">InputStream</span> <span class="n">statusFile</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getStatusFileInputStream</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="n">parser</span><span class="o">.</span><span class="na">visitStatusFile</span><span class="o">(</span><span class="n">statusFile</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
      <span class="c1">// carefully close the resource</span>
      <span class="k">try</span> <span class="o">{</span>
        <span class="n">statusFile</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
      <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Error closing statusFile!&quot;</span><span class="o">);</span>
        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<p>Now that we’ve encapsulated the complexity of the resource handling the <em>UnPokemonStatusFileManager</em> class, code that needs to access the status file can be written in a highly correct manner without much work.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UnPokemonParseStatusFile</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">parseStatusFile</span><span class="o">(</span><span class="n">UnPokemonStatusFileManager</span> <span class="n">statusFileManager</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="c1">// generate anonymous visitor to do the processing</span>
    <span class="n">StatusFileVisitor</span> <span class="n">visitor</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">StatusFileVisitor</span><span class="o">()</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visitStatusFile</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">statusFile</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">readFrom</span><span class="o">(</span><span class="n">statusFile</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">};</span>

    <span class="n">statusFileManager</span><span class="o">.</span><span class="na">parseStatusFile</span><span class="o">(</span><span class="n">visitor</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">static</span> <span class="kt">void</span> <span class="nf">readFrom</span><span class="o">(</span><span class="n">InputStream</span> <span class="n">statusFile</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="c1">// do the reading here...</span>
  <span class="o">}</span>

<span class="o">}</span></code></pre></div>

<p>By encapsulating the full lifecycle of the status file in the visitor pattern, I’ve ensured that it’s always accessed properly.  If I change the place where we store status to be a database rather than a file, nothing needs to change except this one class; the calling code remains the same.</p>

<p>We now have easy re-factoring, no resource leaks, and have simplified calling code.  And finally: there are no new bugs to be introduced by callers that aren’t sure how to use our resource.  Looks like we caught ‘em all!</p>

<h2 id="wrapping-it-all-up">Wrapping It All Up</h2>

<p>So there it is, your new piece of jargon: The Pokémon Problem anti-pattern.  You heard it here first!  Please post any other great examples to the comments section on this post.</p>

        </div>
        <aside id="category-links" class="col-md-offset-1 col-md-3">
          <h4>Categories</h4>
          <nav id="blog-category-list">
  <ul>
  
    <li class="blog-category tech"><a href="/category/tech/" name="Tech">Tech</a></li>
  
    <li class="blog-category analysis"><a href="/category/analysis/" name="Analysis">Analysis</a></li>
  
    <li class="blog-category news-events"><a href="/category/news-events/" name="News &amp; Events">News &amp; Events</a></li>
  
    <li class="blog-category philanthropy"><a href="/category/philanthropy/" name="Philanthropy">Philanthropy</a></li>
  
    <li class="blog-category pcl"><a href="/category/pcl/" name="P/CL">P/CL</a></li>
  
  </ul>
</nav>

          <h4>Save &amp; Share</h4>
          
<nav id="blog-share">
  <ul>
    <li><a href="/feed/index.xml" class="button button-small no-arrow"><span class="icon-pt-icon-feed"></span> Subscribe via RSS</a></li>
    <li><div class="fb-share-button" data-href="https://palantir.com/2009/03/the-pokemon-problem" data-type="button_count"></div></li>
    <li><a href="https://twitter.com/share" class="twitter-share-button" data-via="twitterapi" data-lang="en">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
  </ul>
</nav>

        </aside>
      </div>
    </div>

    <!-- Footer -->
    <footer class="" role="contentinfo">

  <div class="container">
        <div class="row">
          <nav id="products" class="col-sm-2 footer-menu">
            <h2><a href="/products">Products</a></h2>
            <ul id="menu-products">
              <li><a href="/palantir-gotham/" title="Palantir Gotham">Palantir Gotham</a></li>
              <li><a href="/palantir-metropolis/" title="Palantir Metropolis">Palantir Metropolis</a></li>
            </ul>
          </nav>

          <nav id="uses" class="col-sm-4 footer-menu">
            <h2><a href="/solutions">Solutions</a></h2>
            <ul id="menu-uses">
              
              <li><a href="/solutions/anti-fraud/" title="Anti Fraud">Anti Fraud</a></li>
              
              <li><a href="/solutions/capital-markets/" title="Capital Markets">Capital Markets</a></li>
              
              <li><a href="/solutions/case-management/" title="Case Management">Case Management</a></li>
              
              <li><a href="/disaster-preparedness/" title="Crisis Response">Crisis Response</a></li>
              
              <li><a href="/solutions/cyber/" title="Cyber Security">Cyber Security</a></li>
              
              <li><a href="/solutions/defense/" title="Defense">Defense</a></li>
              
              <li><a href="/disaster-preparedness/" title="Disaster Preparedness">Disaster Preparedness</a></li>
              
              <li><a href="/solutions/disease-response/" title="Disease Response">Disease Response</a></li>
              
              <li><a href="/solutions/healthcare-delivery/" title="Healthcare Delivery">Healthcare Delivery</a></li>
              
              <li><a href="/solutions/insider-threat/" title="Insider Threat">Insider Threat</a></li>
              
              <li><a href="/solutions/insurance-analytics" title="Insurance Analytics">Insurance Analytics</a></li>
              
              <li><a href="/solutions/intelligence/" title="Intelligence">Intelligence</a></li>
              
              <li><a href="/solutions/law-enforcement/" title="Law Enforcement">Law Enforcement</a></li>
              
              <li><a href="/solutions/legal-intelligence/" title="Legal Intelligence">Legal Intelligence</a></li>
              
              <li><a href="/solutions/palantir-verus/" title="Palantir Verus">Palantir Verus</a></li>
              
              <li><a href="/solutions/pharma/" title="Pharma R&amp;D">Pharma R&amp;D</a></li>
              
              <li><a href="/solutions/trader-oversight/" title="Trader Oversight">Trader Oversight</a></li>
              
              <li><a href="/solutions/custom-solutions/" title="Custom Solutions">Custom Solutions</a></li>
              
            </ul>
          </nav>

          <nav id="people" class="col-sm-2 footer-menu">
            <h2><a href="/careers/">Careers</a></h2>
            <ul id="menu-people" class="">
              
              <li><a href="/engineering-culture/" title="Engineering Culture">Engineering Culture</a></li>
              
              <li><a href="/life-at-palantir/" title="Life at Palantir">Life at Palantir</a></li>
              
              <li><a href="/getting-hired/" title="Getting Hired">Getting Hired</a></li>
              
              <li><a href="/college/" title="Students">Students</a></li>
              
              <li><a href="/careers/" title="Explore Careers">Explore Careers</a></li>
              
            </ul>
          </nav>

          <nav id="about" class="col-sm-2 footer-menu">
            <h2><a href="/about">About</a></h2>
            <ul id="menu-about">
              <li><a href="/what-we-believe/">What We Believe</a></li>
              <li><a href="/philanthropy-engineering/">Philanthropy Engineering</a></li>
              <li><a href="/library/">Library</a></li>
              <li><a href="/media/">Media</a></li>
            </ul>
          </nav>

          <nav id="ancillary-menu" class="col-sm-2 footer-menu">
            <ul id="menu-ancillary">
              <li><a href="https://support.palantir.com/">Support Portal</a></li>
              <li><a href="/partnerships/">Partnerships</a></li>
              <li><a href="/site-map/">Site Map</a></li>
            </ul>
          </nav>
        </div><!-- /.row -->

        <div id="footer-copyright" class="row">
          <div class="col-sm-12 sub-footer">
            <span class="legalese">&copy; 2015 Palantir Technologies</span>
            <a class="legalese" href="/terms-and-conditions/">Terms of Use</a>
            <a class="legalese" href="/privacy-and-security/">Privacy and Security Statement</a>
            <ul class="social">
              <li><a href="https://www.facebook.com/Palantir" class="icon-pt-icon-facebook"></a></li>
              <li><a href="https://www.twitter.com/palantirtech" class="icon-pt-icon-twitter"></a></li>
              <li><a href="https://plus.google.com/106671163751935200511" rel="publisher" class="icon-pt-icon-gplus"></a></li>
              <li><a href="https://www.github.com/Palantir" class="icon-pt-icon-github"></a></li>
              <li><a href="https://www.youtube.com/user/Palantir" class="icon-pt-icon-youtube"></a></li>
            </ul>
          </div>
        </div><!-- /.row -->

  </div><!-- /.container -->

</footer><!-- /footer -->

  </div><!-- /#site-wrapper -->

  <!-- compiled.min -->
  <script src="/build/js/compiled.min.js?v=20150629162924"></script>

  
<!-- Google Analytics -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-380822-1', 'none');
  ga('send', 'pageview');
</script>


  <script>
  window['_fs_debug'] = false;
  window['_fs_host'] = 'www.fullstory.com';
  window['_fs_org'] = 'Vcq';
  (function(m,n,e,t,l,o,g,y){
    g=m[e]=function(a,b){g.q?g.q.push([a,b]):g._api(a,b);};g.q=[];
    o=n.createElement(t);o.async=1;o.src='https://'+_fs_host+'/s/fs.js';
    y=n.getElementsByTagName(t)[0];y.parentNode.insertBefore(o,y);
    g.identify=function(i,v){g(l,{uid:i});if(v)g(l,v)};g.setUserVars=function(v){FS(l,v)};
    g.clearUserCookie=function(d,i){d=n.domain;while(1){n.cookie='fs_uid=;domain='+d+
    ';path=/;expires='+new Date(0);i=d.indexOf('.');if(i<0)break;d=d.slice(i+1)}}
  })(window,document,'FS','script','user');
</script>

</body>
</html>
