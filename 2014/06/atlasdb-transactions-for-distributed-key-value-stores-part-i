<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
<head>
  <!-- Page Rendered At: 2015-06-29 16:29:24 -0700
   /\\\\\
  /\\\///\\\          /\\\\\\\\\\\\\      /\\\\\\\\\     /\\\             /\\\\\\\\\     /\\\\\     /\\\  /\\\\\\\\\\\\\\\  /\\\\\\\\\\\    /\\\\\\\\\
 /\\\/  \///\\\       \/\\\/////////\\\  /\\\\\\\\\\\\\  \/\\\           /\\\\\\\\\\\\\  \/\\\\\\   \/\\\ \///////\\\/////  \/////\\\///   /\\\///////\\\
 /\\\      \//\\\      \/\\\       \/\\\ /\\\/////////\\\ \/\\\          /\\\/////////\\\ \/\\\/\\\  \/\\\       \/\\\           \/\\\     \/\\\     \/\\\
 \/\\\       \/\\\      \/\\\\\\\\\\\\\/ \/\\\       \/\\\ \/\\\         \/\\\       \/\\\ \/\\\//\\\ \/\\\       \/\\\           \/\\\     \/\\\\\\\\\\\/
  \//\\\      /\\\       \/\\\/////////   \/\\\\\\\\\\\\\\\ \/\\\         \/\\\\\\\\\\\\\\\ \/\\\\//\\\\/\\\       \/\\\           \/\\\     \/\\\//////\\\
    \///\\\  /\\\         \/\\\            \/\\\/////////\\\ \/\\\         \/\\\/////////\\\ \/\\\ \//\\\/\\\       \/\\\           \/\\\     \/\\\    \//\\\
       \///\\\\\/          \/\\\            \/\\\       \/\\\ \/\\\         \/\\\       \/\\\ \/\\\  \//\\\\\\       \/\\\           \/\\\     \/\\\     \//\\\
  /\\\   \/////   /\\\      \/\\\            \/\\\       \/\\\ \/\\\\\\\\\\\ \/\\\       \/\\\ \/\\\   \//\\\\\       \/\\\        /\\\\\\\\\\\ \/\\\      \//\\\
    \//\\\       /\\\        \///             \///        \///  \///////////  \///        \///  \///     \/////        \///        \///////////  \///        \///
      \//\\\    /\\\
          \//\\\\\
-->
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link rel="shortcut icon" href="/favicon.ico" sizes="16x16 32x32" type="image/x-icon">
<title>AtlasDB: Transactions for Distributed Key-Value Stores (Part I) | Palantir</title>
<meta name="viewport" content="width=device-width,user-scalable=no,initial-scale=1.0">
<meta name="apple-mobile-web-app-capable" content="yes">

<meta name="description" content="Palantir builds software that connects data, technologies, humans and environments.">

<meta name="keywords" content="Palantir, home, data, technology, software, solutions, environments, analysis">
<link rel="stylesheet" href="/build/css/style.css?v=20150629162924" media="screen">
<link rel="alternate" type="application/rss+xml"  href="https://palantir.com/feed/index.xml" title="Palantir RSS">
<!-- Modernizr -->
<script src="/build/js/modernizr-custom-2.8.2.min.js"></script>

<!--[if lt IE 9]>
<script src="/build/js/respond-1.4.2.min.js"></script>
<link rel="stylesheet" href="/build/css/ie.css?v=20150629162924" media="screen, projection" type="text/css">
<![endif]-->

  <!-- OpenGraph -->
  <meta property="og:title" content="AtlasDB: Transactions for Distributed Key-Value Stores (Part I)">
<meta property="og:type" content="website">
<meta property="og:url" content="https://palantir.com/2014/06/atlasdb-transactions-for-distributed-key-value-stores-part-i">

<meta property="og:image" content="">

<meta property="og:site_name" content="Palantir">
<meta property="og:description" content="">


</head>
<body id="blog" class="blog-post">
  <div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&appId=448433878601301&version=v2.0";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>

  <div id="site-wrapper">
    <!-- Header -->
    
<header id="site-header">
  <!-- Nav: Main -->
  <nav class="navbar" role="navigation">
    <div class="container-fluid">

      <div class="navbar-header">
        <!-- Logo -->
        <h1 id="site-name" class="logo">
          <a href="/">
            <div id="logo-svg">
              <!--[if gte IE 9]><!-->
                <svg width="100" height="25" viewBox="0 0 100 25" xmlns="http://www.w3.org/2000/svg">
                  <path d="M24.076 2.98h6.237c2.27 0 3.814.139 5.092 1.548.935.992 1.373 2.302 1.373 3.75 0 1.468-.458 2.738-1.469 3.79-.992 1.012-2.27 1.667-5.626 1.667h-3.013v8.611h-2.575v-19.365h-.019zm2.575 8.492h3.071c1.717 0 4.31-.139 4.31-3.294 0-3.036-2.422-3.036-3.776-3.036h-3.605v6.329z"/><path d="M45.132 22.365c-.191-.675-.229-1.31-.229-2.024-1.163 2.222-2.918 2.44-4.005 2.44-2.975 0-4.558-1.746-4.558-3.968 0-1.071.362-2.798 2.27-3.948 1.392-.813 3.452-.893 4.482-.893.61 0 1.011.02 1.755.079 0-1.667 0-2.401-.458-2.976-.496-.675-1.545-.893-2.251-.893-2.441 0-2.575 1.746-2.613 2.282h-2.422c.076-.694.153-1.647.896-2.56.992-1.131 2.823-1.448 4.177-1.448 1.888 0 3.891.615 4.596 1.984.42.813.439 1.448.439 2.063l-.095 6.448c0 .218.019 2.024.21 3.373h-2.193v.04zm-1.678-6.647c-.973 0-4.673 0-4.673 2.738 0 .853.515 2.341 2.689 2.341 1.24 0 2.174-.516 2.765-1.448.534-.913.572-1.667.61-3.552-.439-.04-.801-.079-1.392-.079z" id="a"/><path d="M49.366 2.98h2.422v19.385h-2.422v-19.385z"/><path d="M62.24 22.365c-.172-.675-.229-1.31-.229-2.024-1.163 2.222-2.918 2.44-4.005 2.44-2.975 0-4.577-1.746-4.577-3.968 0-1.071.362-2.798 2.27-3.948 1.392-.813 3.452-.893 4.482-.893.61 0 1.011.02 1.755.079 0-1.667 0-2.401-.458-2.976-.496-.675-1.545-.893-2.251-.893-2.46 0-2.575 1.746-2.613 2.282h-2.422c.076-.694.153-1.647.896-2.56.973-1.131 2.823-1.448 4.177-1.448 1.888 0 3.891.615 4.596 1.984.42.813.439 1.448.439 2.063l-.095 6.448c0 .218.019 2.024.21 3.373h-2.174v.04zm-1.697-6.647c-.973 0-4.673 0-4.673 2.738 0 .853.515 2.341 2.689 2.341 1.24 0 2.174-.516 2.765-1.448.534-.913.572-1.667.61-3.552-.42-.04-.782-.079-1.392-.079z"/><path d="M66.493 10.44l-.019-1.567h2.422l.019 2.183c.286-.556 1.202-2.44 4.158-2.44 1.163 0 4.692.456 4.692 4.583v9.147h-2.479v-8.571c0-.893-.095-1.687-.706-2.302-.629-.615-1.469-.913-2.289-.913-1.755 0-3.376 1.31-3.376 4.028v7.758h-2.422v-11.905z"/><path d="M78.528 8.873h2.289v-2.877l2.403-.813v3.671h2.899v1.845h-2.899v8.036c0 .675 0 1.806 1.736 1.806.496 0 .954-.079 1.163-.139v1.964c-.439.079-1.144.159-2.022.159-2.212 0-3.28-.675-3.28-2.877v-8.909h-2.289v-1.865z"/><path d="M87.816 2.98h2.918v2.817h-2.918v-2.817zm.267 5.893h2.422v13.472h-2.422v-13.472z"/><path d="M92.755 11.611c0-.913-.057-1.845-.134-2.738h2.46l.057 2.599c.458-1.885 2.022-2.5 3.09-2.659.725-.099 1.259-.079 1.678-.06v2.46c-.134-.06-.286-.079-.458-.099-.172-.02-.42-.02-.706-.02-2.861 0-3.547 1.766-3.547 4.087v7.163h-2.441v-10.734z"/><path d="M9.866-.04c-5.211 0-9.45 4.226-9.45 9.464s4.22 9.464 9.45 9.464c5.211 0 9.45-4.226 9.45-9.464s-4.24-9.464-9.45-9.464zm0 16.012c-3.606 0-6.538-2.937-6.538-6.548s2.932-6.548 6.538-6.548c3.606 0 6.538 2.937 6.538 6.548-.02 3.631-2.932 6.548-6.538 6.548zM18.306 18.056l-8.44 3.651-8.46-3.651-1.387 2.698 9.847 4.206 9.847-4.206-1.407-2.698z"/>
              <!--<![endif]-->
              </svg>
            </div>
          </a>
        </h1>
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#main-navbar">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
      </div>

      <div class="collapse navbar-collapse" id="main-navbar">
        <ul class="nav navbar-nav">
          <li>
            <a href="/products/">Products</a>
            <ul class="dropdown-menu">
              <li><a href="/palantir-gotham/">Palantir Gotham</a></li>
              <li><a href="/palantir-metropolis/">Palantir Metropolis</a></li>
            </ul>
          </li>
          <li>
            <a href="/solutions/">Solutions</a>
            <ul class="dropdown-menu split-menu">
              
              <li><a href="/solutions/anti-fraud/" title="Anti Fraud">Anti Fraud</a></li>
              
              <li><a href="/solutions/capital-markets/" title="Capital Markets">Capital Markets</a></li>
              
              <li><a href="/solutions/case-management/" title="Case Management">Case Management</a></li>
              
              <li><a href="/disaster-preparedness/" title="Crisis Response">Crisis Response</a></li>
              
              <li><a href="/solutions/cyber/" title="Cyber Security">Cyber Security</a></li>
              
              <li><a href="/solutions/defense/" title="Defense">Defense</a></li>
              
              <li><a href="/disaster-preparedness/" title="Disaster Preparedness">Disaster Preparedness</a></li>
              
              <li><a href="/solutions/disease-response/" title="Disease Response">Disease Response</a></li>
              
              <li><a href="/solutions/healthcare-delivery/" title="Healthcare Delivery">Healthcare Delivery</a></li>
              
              <li><a href="/solutions/insider-threat/" title="Insider Threat">Insider Threat</a></li>
              
              <li><a href="/solutions/insurance-analytics" title="Insurance Analytics">Insurance Analytics</a></li>
              
              <li><a href="/solutions/intelligence/" title="Intelligence">Intelligence</a></li>
              
              <li><a href="/solutions/law-enforcement/" title="Law Enforcement">Law Enforcement</a></li>
              
              <li><a href="/solutions/legal-intelligence/" title="Legal Intelligence">Legal Intelligence</a></li>
              
              <li><a href="/solutions/palantir-verus/" title="Palantir Verus">Palantir Verus</a></li>
              
              <li><a href="/solutions/pharma/" title="Pharma R&amp;D">Pharma R&amp;D</a></li>
              
              <li><a href="/solutions/trader-oversight/" title="Trader Oversight">Trader Oversight</a></li>
              
              <li><a href="/solutions/custom-solutions/" title="Custom Solutions">Custom Solutions</a></li>
              
            </ul>
          </li>
          <li>
            <a href="/careers/">Careers</a>
            <ul class="dropdown-menu">
              
              <li><a href="/engineering-culture/" title="Engineering Culture">Engineering Culture</a></li>
              
              <li><a href="/life-at-palantir/" title="Life at Palantir">Life at Palantir</a></li>
              
              <li><a href="/getting-hired/" title="Getting Hired">Getting Hired</a></li>
              
              <li><a href="/college/" title="Students">Students</a></li>
              
              <li><a href="/careers/" title="Explore Careers">Explore Careers</a></li>
              
            </ul>
          </li>
          <li>
            <a href="/about/">About</a>
            <ul class="dropdown-menu">
              <li><a href="/what-we-believe/">What We Believe</a></li>
              <li><a href="/philanthropy-engineering/">Philanthropy Engineering</a></li>
              <li><a href="/library/">Library</a></li>
              <li><a href="/media/">Media</a></li>
            </ul>
          </li>
        </ul>
        <ul class="nav navbar-nav secondary">
          <li><a href="/contact/">Contact</a></li>
          <li><a href="/category/blogs/">Blog</a></li>
          <li class="search-form">
            <form role="search" method="get" class="search" action="/search/">
              <input id="main-search-query" type="text" name="q" value="" class="search-input search_field_main" maxlength="50" placeholder="Search Palantir">
              <input type="submit" class="search-trigger search_submit_main">
            </form>
          </li>
        </ul>
      </div><!-- /.navbar-collapse -->

    </div><!-- /.container-fluid -->
  </nav>


</header><!-- /header -->


    <div id="hero-wrapper-auto" data-image-bg='["/build/images/blog/blog-hero.jpg", "/build/images/blog/blog-hero@2x.jpg"]'>
      <div class="container">
        <div class="row block block-hero block-centered">
          <article class="col-xs-12">
            <h1 class="main"><a href="/category/blogs">The Palantir Blog</a></h1>
          </article>
        </div><!-- /.row -->
      </div><!-- /.container -->
      <div id="hero-subnav">
        <div class="container">
          <div class="row">
            <div class="col-md-8 col-md-offset-2">
              <nav>
                <ul class="blog-meta transparent">
                  <li class="blog-meta-date"><span class="icon-pt-icon-time"></span> June 19, 2014</li>
                  <li class="blog-meta-author"><span class="icon-pt-icon-person"></span> <a href="/author/regs">Ari Gesher</a></li>
                  
                </ul>
              </nav>
            </div>
          </div>
        </div>
      </div>
    </div><!-- /#hero-wrapper-auto -->

    <!-- Page Content -->
    <div class="container">
      <div class="row">
        <div id="post-content" class="col-md-offset-1 col-md-7">
          <h1>AtlasDB: Transactions for Distributed Key-Value Stores (Part I)</h1>
          <p><em>AtlasDB is a massively scalable datastore and transactional layer that
can be placed on top of any key-value store to give it ACID properties.
This is the first of several blog posts that will introduce AtlasDB and
describe how we built it at Palantir</em>.</p>

<h2 id="building-atlasdb-the-inspiration">Building AtlasDB: the Inspiration</h2>

<p>In 2010, Daniel Peng and Frank Debek of Google put out a paper entitled,
<em>“<a href="http://research.google.com/pubs/pub36726.html">Large-scale Incremental Processing Using Distributed Transactions and
Notifications</a>“</em>. The
paper describes a system in use at Google named Percolator, which sits
on top of <a href="http://research.google.com/archive/bigtable.html">BigTable</a>,
Google’s distributed key-value store.</p>

<p>Google needed transactions with
<a href="https://en.wikipedia.org/wiki/ACID">ACID</a> properties. They also needed
a highly fault-tolerant system to deal with the potential failure of key
parts of their system under load at massive scales. This drove them to
push the accounting data for the transactions into BigTable as well, as
BigTable already handled both replication of its data and fault
tolerance.</p>

<p>Unfortunately, due to the number of writes involved in the transaction
accounting, they saw an approximately 75% performance hit when using
transactions. Percolator was built to enable incremental updates to the
search indexes for the Google search engine, which was previously a
periodic batch process. In this case, the extra reliability afforded by
using BigTable to track the transactions was the important factor; even
though there was a significant performance hit (over using raw
BigTable), the overall performance was high enough to meet its design
criteria.</p>

<p>Meanwhile, at Palantir, we were hitting a similar obstacle. The
interactive analytic core of Palantir Gotham, which was originally built
with a traditional RDBMS as its backing store, was hitting the limits of
economical and easy scaling. We needed to move to a distributed backing
store for scalability, but we needed transactions to enable our
higher-level Revisioning Database to work correctly.</p>

<p>Percolator presented interesting possibilities, but with a 75%
performance hit, the latency would be too long for our users. We shoot
for a maximum ten second wait time when doing interactive
analysis—anything longer is an unacceptable interruption to our users’
investigative flow. Studying the Percolator protocol, our engineers saw
some places where design constraints could be relaxed to lower the
latency of each operation.</p>

<p>And so, the idea for AtlasDB was born. Now it was just a matter of
building it.</p>

<h2 id="designing-atlasdb">Designing AtlasDB</h2>

<h3 id="understanding-data-and-development-at-palantir">Understanding Data and Development at Palantir</h3>

<p>We take a human-centered design approach to building software. Instead
of asking what technological problem we want to attack in isolation, we
ask, “What features and infrastructure would a human analyst need to do
his or her work?” To answer this question, we use a holistic
understanding of how low-level data integration, scalable data servers,
API layers, and an entire suite of user interface tools, when properly
integrated, create an efficient, frictionless user experience for
non-technical subject matter experts working with large-scale, disparate
data to solve real-world problems. It’s an over-arching user experience
(UX) play that decomposes into a lot of hard technical problems—similar
to building something as complex and seamless as an iPhone.</p>

<p>When components already exist that serve our needs, we are happy to use
them—our products use several of the high-quality open source
datastores, map-reduce frameworks, and search engines. But we build new
things whenever we identify a capability gap. Some examples of this in
past:</p>

<ul>
  <li>The Revisioning Database, the heart of Palantir Gotham that enables
Nexus Peering</li>
  <li><a href="/2013/07/nexus-peering-solving-the-inter-organizational-data-sharing-problem/">Nexus
Peering</a>,
a technology that allows a single Palantir Gotham instance to be
distributed, or for multiple instances to securely and safely
exchange data</li>
  <li>The Maps application, which
allows the viewing of geospatial imagery and also the visualization
and analysis of objects with associated coordinates</li>
  <li><a href="/2011/04/inside-horizon-interactive-analysis-at-cloud-scale/">Horizon</a>,
an in-memory database that drives interactive querying over billions
of objects in interactive time, used to back the Object Explorer
application.</li>
</ul>

<h3 id="scaling-round-1-federation-and-palantir-phoenix">Scaling, Round 1: Federation and Palantir Phoenix</h3>

<p>In 2005, when we first started building Palantir Gotham, there wasn’t
really a viable alternative to the RDBMS. The Revisioning Database, the
Palantir Gotham persistent datastore, was originally an implementation
of a special schema inside a SQL database. The SQL RDBMS performed well
for our users until up to about a terabyte of data. But as the size and
scope of Palantir Gotham-based analytic workflows pushed the database to
its limits, there were only two available options if we stuck with a
RDMBS:</p>

<ul>
  <li><em>Get a larger, more powerful computer</em>. This works, but the price of
computer hardware and advanced database software needed to support
that scale grows super-linearly (sometimes exponentially) with the
size of the data, making this approach really expensive, really
fast.</li>
  <li><em>Move to multiple computers and a <a href="http://en.wikipedia.org/wiki/Shard_(database_architecture)">sharded database
architecture</a></em>.
While this can work well for certain database schema, our schema is
not well-suited to this approach. Sharding can also add a lot of
complexity to the application using it, leading to a more bug-prone
and fragile code base.</li>
</ul>

<p>We didn’t like either of these options, so we began considering
non-RDBMS-based solutions. We started with a federated approach that let
us address much larger scales of source data without scaling the core.
We developed Palantir Phoenix, a petabyte-scale datastore that can run
map-reduce and other batch-oriented processes to filter and classify
data that needs to be reviewed by human analysts. By federating search
and storage of massive-scale data out to Palantir Phoenix, and importing
relevant results into Palantir Gotham on the fly, we could guarantee
analysts would still have all the data they need at their fingertips
without storing everything in the Palantir Gotham Revisioning Database.</p>

<p>For example, a cyber security workflow may include network flows data,
proxy logs, malware scanning results, inventory data, authentication,
and VPN logs. The vast majority of the data in these data sets are not
of interest to cyber security analysts—they overwhelmingly represent
legitimate traffic. But when something bad happens, <a href="https://www.youtube.com/watch?v=_EhYezVO6EE" title="Uncovering Malicious Behavior at Petabyte Scale">such as malware
being detected on a user’s laptop, analysts can pull the relevant and
related narrow slices of data from Phoenix into Palantir Gotham to
determine the extent and severity of the
intrusion</a>.
Using our Dynamic Ontology, data is mapped into the Palantir object
model and managed in three separate subsystems:</p>

<ul>
  <li>a search server for fast full-text and wildcard searching;</li>
  <li>a Horizon server for top-down filtering and comparisons of large
sets of objects;</li>
  <li>the Revisioning Database for tracking changes to the data and
allowing analysts to work independently while also sharing analytic
insights with each other. (This is also where the metadata that
enables <a href="/wp-assets/wp-content/uploads/2012/06/ProtectingPrivacy_CivilLiberties_2012.pdf">Palantir’s privacy and security
controls</a>
is stored.)</li>
</ul>

<p>While the size of the data that ends up in Palantir Gotham can be much
smaller than the total data size of an instance, it can still get pretty
big. Moreover, it doesn’t help that all of the housekeeping Palantir
Gotham does around the source of the data (e.g. the revisions and
security information) requires us to store 2-5x more information than
just the size of the initial imported source data.</p>

<h3 id="scaling-round-2-nosql-k-v-stores">Scaling, Round 2: NoSQL K/V stores</h3>

<p>It soon became clear that we were going to need to replace the datastore
for the Revisioning Database. An obvious place to look for economical
scalability was a class of datastores dubbed,
‘<a href="http://en.wikipedia.org/wiki/NoSQL">NoSQL</a>’.</p>

<p>NoSQL datastores use collections of commodity-class machines working in
concert, enabling engineers to build a distributed system capable of
scaling up to large data volumes and high performance with a smooth
price curve—add more machines, get more capacity. When we first built
the Revisioning Database in 2005, NoSQL systems offered intriguing
potential as an approach but were still plagued with performance, scale,
and most importantly, data loss and corruption problems. In the
intervening years, these early problems have largely been engineered
away.</p>

<p>Today, these systems underlie much of the modern web and are developed
and used by companies like
<a href="http://research.google.com/archive/bigtable.html">Google</a>,
<a href="http://en.wikipedia.org/wiki/Apache_Cassandra#History">Facebook</a>, and
<a href="http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf">Amazon</a>).
Many of these use a key-value model (K/V), wherein a short, unique
identifier (the key) is used as a key to access an individual storage
cell (the value). The storage cell may hold a simple value or a larger,
complex data structure.</p>

<p>While NoSQL stores have great scaling properties, they don’t make great
guarantees about the consistency of the system. Since each node of the
system runs independently and any given value could lie on any node,
it’s impossible to know if any read of more than one node is consistent,
i.e., came from the same write. For many uses (e.g., updating fields on
a social network profile page), this property (called <em><a href="http://en.wikipedia.org/wiki/Eventual_consistency">eventual
consistency</a></em>) is not
a problem.</p>

<p>Unfortunately, for a system like Palantir Gotham, we’re not just storing
individual values but sets of related values that need to read and write
consistently, like many index entries along with a primary value. A lack
of consistent read means that any operation that uses values from
multiple keys can never be guaranteed to be correct.</p>

<p>Fortunately, implementing transactions can solve this problem by
providing four guarantees, referred to as ACID:</p>

<ul>
  <li><strong>Atomicity</strong> - every distinct operation of a transaction succeeds
or the state is rolled back as if the transaction never happened;
there is no way to partially complete the update of multiple fields</li>
  <li><strong>Consistency</strong> - data is in a consistent state at the beginning and
at the end of a transaction</li>
  <li><strong>Isolation</strong> - the work taking place inside a transaction is
invisible to any other operation taking place, so two transactions
can be run concurrently without interfering</li>
  <li><strong>Durability</strong> - once a transaction commits successfully, the data
must have been written to non-volatile storage in such a way that it
won’t be lost in the event of a crash or power failure</li>
</ul>

<p>Aside from the formal guarantees provided by transactions there is a
very practical consideration: without transactions, programmers have to
reason very carefully about consistency and write a lot of code to try
to manage it. As a result, development proceeds slowly and the code is
much more fragile to future changes. Pushing the consistency (and by
extension, correctness) logic down into a transaction layer is usually
the right <a href="http://en.wikipedia.org/wiki/Separation_of_concerns">separation of
concerns</a>.</p>

<h3 id="setting-the-stage-for-atlasdb-a-transactional-api-for-key-value-stores">Setting the Stage for AtlasDB: A Transactional API for Key-Value Stores</h3>

<p><img src="/wp-assets/posts/2014/06/atlas-db-architecture.png" alt="AtlasDB Architecture" /></p>

<p>The design of AtlasDB departs from Percolator in a few key aspects. By
taking key locking out of the main datastore and into a dedicated lock
server, the write overhead was lessened, increasing performance. Further
improvements were gained by allowing the transaction accounting table to
live in a datastore separate from the main scalable datastore. This
decoupling allows the transaction data to live in a system that gains
higher write performance in exchange for less scalability. Since the
transaction accounting data is quite compact, this is a huge win for
performance of the overall system. (We’ll cover the protocol and
architecture in-depth in a later post.)</p>

<p>The NoSQL-transaction revolution still required a few more developments
to make the burgeoning AtlasDB as engineer- and user-friendly as
possible. Along with the core changes to the transaction protocol and
system architecture, our team set about designing a system that could be
used with almost any key-value store. Rather being tied to a particular
key-value store, we decided to build an API layer that exposed
transaction primitives. The API layer (effectively just a code library)
along with a few lightweight network services created a system that
could be applied to any key-value store. The writing of the driver for
any new key-value store thus became a one-day task comprising, at most,
a few hundred lines of code.</p>

<p>This is a good idea for a few reasons:</p>

<ol>
  <li><strong>Deployment flexibility</strong> - An application built on top of AtlasDB
would always see the same API, allowing the key-value store to be
switched out for different levels of scale. Palantir Gotham needs to
run at scales as small as a single laptop, both as a development
environment for creating customizations and enhancements and in
order to support disconnected, self-contained operation for
environments that don’t have any networking infrastructure. It also
needs to operate at petabyte scale for large production systems.
Key-value stores that run at massive scale are usually somewhat
complex to setup and administer; the easy-to-set-up key-value stores
don’t scale.</li>
  <li><strong>Pace of change in NoSQL</strong> - Though much more advanced than it was
a decade ago, the NoSQL world has not yet reached full maturity. The
capabilities, scale, and performance of different offerings is still
rapidly evolving. Keeping AtlasDB free from committing to a single
key-value store is essential, given the uncertainty around what the
best options will be even a year or two from now.</li>
  <li><strong>Consistent API</strong> - The bulk of the team’s work in completing
AtlasDB was not building the transactional layer itself, but in
porting our extensive, existing data fusion platform over from SQL
to a key-value model of data storage. By abstracting the API into
the AtlasDB transactional layer, we are preventing having to port
the entire product to yet another API in the future—switching
datastores is as easy as writing a new K/V driver.</li>
</ol>

<h2 id="atlasdb-today">AtlasDB today</h2>

<p>AtlasDB is now the default datastore inside of new production instances
of Palantir Gotham and is already being re-purposed for other use cases
that need both the scalability and consistency that it offers. Stay
tuned for part two of the AtlasDB series, where we’ll do a deep dive
into the system architecture and transaction protocol that make it go.</p>

        </div>
        <aside id="category-links" class="col-md-offset-1 col-md-3">
          <h4>Categories</h4>
          <nav id="blog-category-list">
  <ul>
  
    <li class="blog-category tech"><a href="/category/tech/" name="Tech">Tech</a></li>
  
    <li class="blog-category analysis"><a href="/category/analysis/" name="Analysis">Analysis</a></li>
  
    <li class="blog-category news-events"><a href="/category/news-events/" name="News &amp; Events">News &amp; Events</a></li>
  
    <li class="blog-category philanthropy"><a href="/category/philanthropy/" name="Philanthropy">Philanthropy</a></li>
  
    <li class="blog-category pcl"><a href="/category/pcl/" name="P/CL">P/CL</a></li>
  
  </ul>
</nav>

          <h4>Save &amp; Share</h4>
          
<nav id="blog-share">
  <ul>
    <li><a href="/feed/index.xml" class="button button-small no-arrow"><span class="icon-pt-icon-feed"></span> Subscribe via RSS</a></li>
    <li><div class="fb-share-button" data-href="https://palantir.com/2014/06/atlasdb-transactions-for-distributed-key-value-stores-part-i" data-type="button_count"></div></li>
    <li><a href="https://twitter.com/share" class="twitter-share-button" data-via="twitterapi" data-lang="en">Tweet</a>
<script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script></li>
  </ul>
</nav>

        </aside>
      </div>
    </div>

    <!-- Footer -->
    <footer class="patterned" role="contentinfo">

  <div class="container">
        <div class="row">
          <nav id="products" class="col-sm-2 footer-menu">
            <h2><a href="/products">Products</a></h2>
            <ul id="menu-products">
              <li><a href="/palantir-gotham/" title="Palantir Gotham">Palantir Gotham</a></li>
              <li><a href="/palantir-metropolis/" title="Palantir Metropolis">Palantir Metropolis</a></li>
            </ul>
          </nav>

          <nav id="uses" class="col-sm-4 footer-menu">
            <h2><a href="/solutions">Solutions</a></h2>
            <ul id="menu-uses">
              
              <li><a href="/solutions/anti-fraud/" title="Anti Fraud">Anti Fraud</a></li>
              
              <li><a href="/solutions/capital-markets/" title="Capital Markets">Capital Markets</a></li>
              
              <li><a href="/solutions/case-management/" title="Case Management">Case Management</a></li>
              
              <li><a href="/disaster-preparedness/" title="Crisis Response">Crisis Response</a></li>
              
              <li><a href="/solutions/cyber/" title="Cyber Security">Cyber Security</a></li>
              
              <li><a href="/solutions/defense/" title="Defense">Defense</a></li>
              
              <li><a href="/disaster-preparedness/" title="Disaster Preparedness">Disaster Preparedness</a></li>
              
              <li><a href="/solutions/disease-response/" title="Disease Response">Disease Response</a></li>
              
              <li><a href="/solutions/healthcare-delivery/" title="Healthcare Delivery">Healthcare Delivery</a></li>
              
              <li><a href="/solutions/insider-threat/" title="Insider Threat">Insider Threat</a></li>
              
              <li><a href="/solutions/insurance-analytics" title="Insurance Analytics">Insurance Analytics</a></li>
              
              <li><a href="/solutions/intelligence/" title="Intelligence">Intelligence</a></li>
              
              <li><a href="/solutions/law-enforcement/" title="Law Enforcement">Law Enforcement</a></li>
              
              <li><a href="/solutions/legal-intelligence/" title="Legal Intelligence">Legal Intelligence</a></li>
              
              <li><a href="/solutions/palantir-verus/" title="Palantir Verus">Palantir Verus</a></li>
              
              <li><a href="/solutions/pharma/" title="Pharma R&amp;D">Pharma R&amp;D</a></li>
              
              <li><a href="/solutions/trader-oversight/" title="Trader Oversight">Trader Oversight</a></li>
              
              <li><a href="/solutions/custom-solutions/" title="Custom Solutions">Custom Solutions</a></li>
              
            </ul>
          </nav>

          <nav id="people" class="col-sm-2 footer-menu">
            <h2><a href="/careers/">Careers</a></h2>
            <ul id="menu-people" class="">
              
              <li><a href="/engineering-culture/" title="Engineering Culture">Engineering Culture</a></li>
              
              <li><a href="/life-at-palantir/" title="Life at Palantir">Life at Palantir</a></li>
              
              <li><a href="/getting-hired/" title="Getting Hired">Getting Hired</a></li>
              
              <li><a href="/college/" title="Students">Students</a></li>
              
              <li><a href="/careers/" title="Explore Careers">Explore Careers</a></li>
              
            </ul>
          </nav>

          <nav id="about" class="col-sm-2 footer-menu">
            <h2><a href="/about">About</a></h2>
            <ul id="menu-about">
              <li><a href="/what-we-believe/">What We Believe</a></li>
              <li><a href="/philanthropy-engineering/">Philanthropy Engineering</a></li>
              <li><a href="/library/">Library</a></li>
              <li><a href="/media/">Media</a></li>
            </ul>
          </nav>

          <nav id="ancillary-menu" class="col-sm-2 footer-menu">
            <ul id="menu-ancillary">
              <li><a href="https://support.palantir.com/">Support Portal</a></li>
              <li><a href="/partnerships/">Partnerships</a></li>
              <li><a href="/site-map/">Site Map</a></li>
            </ul>
          </nav>
        </div><!-- /.row -->

        <div id="footer-copyright" class="row">
          <div class="col-sm-12 sub-footer">
            <span class="legalese">&copy; 2015 Palantir Technologies</span>
            <a class="legalese" href="/terms-and-conditions/">Terms of Use</a>
            <a class="legalese" href="/privacy-and-security/">Privacy and Security Statement</a>
            <ul class="social">
              <li><a href="https://www.facebook.com/Palantir" class="icon-pt-icon-facebook"></a></li>
              <li><a href="https://www.twitter.com/palantirtech" class="icon-pt-icon-twitter"></a></li>
              <li><a href="https://plus.google.com/106671163751935200511" rel="publisher" class="icon-pt-icon-gplus"></a></li>
              <li><a href="https://www.github.com/Palantir" class="icon-pt-icon-github"></a></li>
              <li><a href="https://www.youtube.com/user/Palantir" class="icon-pt-icon-youtube"></a></li>
            </ul>
          </div>
        </div><!-- /.row -->

  </div><!-- /.container -->

</footer><!-- /footer -->

  </div><!-- /#site-wrapper -->

  <!-- compiled.min -->
  <script src="/build/js/compiled.min.js?v=20150629162924"></script>

  
<!-- Google Analytics -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-380822-1', 'none');
  ga('send', 'pageview');
</script>


  <script>
  window['_fs_debug'] = false;
  window['_fs_host'] = 'www.fullstory.com';
  window['_fs_org'] = 'Vcq';
  (function(m,n,e,t,l,o,g,y){
    g=m[e]=function(a,b){g.q?g.q.push([a,b]):g._api(a,b);};g.q=[];
    o=n.createElement(t);o.async=1;o.src='https://'+_fs_host+'/s/fs.js';
    y=n.getElementsByTagName(t)[0];y.parentNode.insertBefore(o,y);
    g.identify=function(i,v){g(l,{uid:i});if(v)g(l,v)};g.setUserVars=function(v){FS(l,v)};
    g.clearUserCookie=function(d,i){d=n.domain;while(1){n.cookie='fs_uid=;domain='+d+
    ';path=/;expires='+new Date(0);i=d.indexOf('.');if(i<0)break;d=d.slice(i+1)}}
  })(window,document,'FS','script','user');
</script>

</body>
</html>
